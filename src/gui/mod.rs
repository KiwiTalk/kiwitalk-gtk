/*
 * This source code is generated by build script using glade-bindgen
 * all modification will usually be overwritten when build
 */
# [allow (dead_code)] pub struct Login { pub window : gtk :: Window , pub icon_image : gtk :: Image , pub email_entry : gtk :: Entry , pub password_entry : gtk :: Entry , pub keep_login_check_button : gtk :: CheckButton , pub force_check_button : gtk :: CheckButton , pub apply_button : gtk :: Button , pub cancel_button : gtk :: Button , pub id_not_found_message_dialog : gtk :: MessageDialog , pub register_device_dialog : gtk :: Dialog , pub register_device_apply_button : gtk :: Button , pub register_device_cancel_button : gtk :: Button , pub register_device_code_entry : gtk :: Entry , pub register_device_code_send_button : gtk :: Button , pub device_register_success_message_dialog : gtk :: MessageDialog , pub too_many_confirm_request_message_dialog : gtk :: MessageDialog , pub wrong_confirm_code_message_dialog : gtk :: MessageDialog , pub wrong_password_message_dialog : gtk :: MessageDialog , } impl Login { thread_local ! { static OBJECTS : std :: sync :: Mutex < Option < std :: rc :: Rc < Login >> > = std :: sync :: Mutex :: new (None) ; } pub fn get () -> std :: rc :: Rc < Self > { Self :: OBJECTS . with (| objects | { let mut objects = objects . lock () . unwrap () ; if objects . is_none () { objects . replace (std :: rc :: Rc :: new (Self :: new ())) ; } objects . as_ref () . unwrap () . clone () }) } pub fn new () -> Self { let builder = gtk :: Builder :: from_string (include_str ! ("login.glade")) ; Self { window : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "window") . unwrap () , icon_image : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "icon_image") . unwrap () , email_entry : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "email_entry") . unwrap () , password_entry : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "password_entry") . unwrap () , keep_login_check_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "keep_login_check_button") . unwrap () , force_check_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "force_check_button") . unwrap () , apply_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "apply_button") . unwrap () , cancel_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "cancel_button") . unwrap () , id_not_found_message_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "id_not_found_message_dialog") . unwrap () , register_device_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "register_device_dialog") . unwrap () , register_device_apply_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "register_device_apply_button") . unwrap () , register_device_cancel_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "register_device_cancel_button") . unwrap () , register_device_code_entry : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "register_device_code_entry") . unwrap () , register_device_code_send_button : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "register_device_code_send_button") . unwrap () , device_register_success_message_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "device_register_success_message_dialog") . unwrap () , too_many_confirm_request_message_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "too_many_confirm_request_message_dialog") . unwrap () , wrong_confirm_code_message_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "wrong_confirm_code_message_dialog") . unwrap () , wrong_password_message_dialog : gtk :: prelude :: BuilderExtManual :: get_object (& builder , "wrong_password_message_dialog") . unwrap () , } } }